--- a/readini.cpp
+++ b/readini.cpp
@@ -81,6 +81,7 @@ int maxSessions = MAX_SESSIONS_DEFAULT;
 
 //Logging level
 int loggingLevel = DEFAULT_LOGGING_LEVEL;
+bool loggingStdErr = true;
 
   
 //Parse ip address (i'm sure similar function has been recoded thousands of times ;-)
@@ -155,6 +156,7 @@ bool readIniFile(char *iniFilePathAndNam
         strlcpy(runAsUser, iniparser_getstring(dict, "general:runasuser", "uvncrep"), MY_TMP_BUF_LEN);
                 
         loggingLevel = iniparser_getint(dict, "general:logginglevel", DEFAULT_LOGGING_LEVEL);     
+        loggingStdErr = iniparser_getboolean(dict, "general:loggingstderr", true);
         if (loggingLevel > LEVEL_3)
             loggingLevel = DEFAULT_LOGGING_LEVEL;
         if (loggingLevel < LEVEL_0)
--- a/readini.h
+++ b/readini.h
@@ -11,6 +11,8 @@ extern int allowedModes;
 
 extern int loggingLevel;
 
+extern bool loggingStdErr;
+
 extern int allowedMode1ServerPort; 
 
 extern int requireListedId;
--- a/repeater.cpp
+++ b/repeater.cpp
@@ -49,6 +49,7 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <pwd.h>        //for getpwnam() in dropPrivileges()
+#include <syslog.h>
 
 #include "commondefines.h"
 #include "repeaterproc.h"
@@ -167,8 +168,10 @@ void debug(int msgLevel, const char *fmt
         logLineStart("UltraVnc");
 
         va_start(args, fmt);
-    
-        vfprintf(stderr, fmt, args);
+	if (loggingStdErr)    
+           vfprintf(stderr, fmt, args);
+        else
+	   vsyslog(LOG_INFO, fmt, args);
         va_end(args);
     }
 }
@@ -183,8 +186,10 @@ static void fatal(const char *fmt, ...)
     logLineStart("UltraVnc FATAL");
     
     va_start(args, fmt);
-   
-    vfprintf(stderr, fmt, args);
+    if (loggingStdErr)
+	vfprintf(stderr, fmt, args);
+    else
+        vsyslog(LOG_ERR, fmt, args);
     va_end(args);
  
     //Close program down cleanly (as if user just pressed ctrl+c, of course 
@@ -198,6 +203,8 @@ static void logLineStart(const char *pre
     time_t errTime;
     char buf[MY_TMP_BUF_LEN];
     char *lf;
+    if (!loggingStdErr)
+	return;
 
     errTime = time(NULL);
 
@@ -1748,6 +1755,7 @@ static void dropRootPrivileges()
 
 int main(int argc, char **argv)
 {
+    openlog ( basename ( argv [ 0 ] ), LOG_PID, LOG_USER );
     //Viewer port listener variable
     listenPortInfo viewerListener = {-1, -1};
 
