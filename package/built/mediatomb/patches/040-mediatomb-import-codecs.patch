--- /src/scripting/script.cc	(revision 2102)
+++ /src/scripting/script.cc	(working copy)
@@ -1037,6 +1037,12 @@
         if (string_ok(tmp))
             aux->put(_(ATRAILERS_AUXDATA_POST_DATE), tmp);
 #endif
+        tmp = obj->getResource(0)->getOption(_(RESOURCE_OPTION_VCODEC));
+        if (string_ok(tmp))
+            aux->put(_(RESOURCE_OPTION_VCODEC), tmp);
+        tmp = obj->getResource(0)->getOption(_(RESOURCE_OPTION_ACODEC));
+        if (string_ok(tmp))
+            aux->put(_(RESOURCE_OPTION_ACODEC), tmp);
 
         Ref<Array<DictionaryElement> > elements = aux->getElements();
         int len = elements->size();
--- /src/metadata/ffmpeg_handler.cc	(revision 2102)
+++ /src/metadata/ffmpeg_handler.cc	(working copy)
@@ -178,6 +178,7 @@
 	for(i=0; i<pFormatCtx->nb_streams; i++) 
     {
 		AVStream *st = pFormatCtx->streams[i];
+        if (st) log_debug("Stream type: %d, codec ID: %d\n", st->codec->codec_type, st->codec->codec_id);
 		if((st != NULL) && (videoset == false) && (st->codec->codec_type == CODEC_TYPE_VIDEO))
         {
             if (st->codec->codec_tag > 0)
@@ -197,6 +198,23 @@
                                                     fcc);
             }
 
+            if (st->codec->codec_id > 0)
+            {
+                const char *vc = NULL;
+                switch(st->codec->codec_id)
+                {
+#define VC(ID) case CODEC_ID_##ID: vc = #ID; break
+                    VC(MPEG1VIDEO); VC(MPEG2VIDEO); VC(MPEG2VIDEO_XVMC); VC(H261); VC(H263); VC(RV10); VC(RV20); VC(MJPEG); VC(MJPEGB); VC(LJPEG); VC(SP5X); VC(JPEGLS); VC(MPEG4); VC(RAWVIDEO); VC(MSMPEG4V1); VC(MSMPEG4V2); VC(MSMPEG4V3); VC(WMV1); VC(WMV2); VC(H263P); VC(H263I); VC(FLV1); VC(SVQ1); VC(SVQ3); VC(DVVIDEO); VC(HUFFYUV); VC(CYUV); VC(H264); VC(INDEO3); VC(VP3); VC(THEORA); VC(ASV1); VC(ASV2); VC(FFV1); VC(4XM); VC(VCR1); VC(CLJR); VC(MDEC); VC(ROQ); VC(INTERPLAY_VIDEO); VC(XAN_WC3); VC(XAN_WC4); VC(RPZA); VC(CINEPAK); VC(WS_VQA); VC(MSRLE); VC(MSVIDEO1); VC(IDCIN); VC(8BPS); VC(SMC); VC(FLIC); VC(TRUEMOTION1); VC(VMDVIDEO); VC(MSZH); VC(ZLIB); VC(QTRLE); VC(SNOW); VC(TSCC); VC(ULTI); VC(QDRAW); VC(VIXL); VC(QPEG); VC(XVID); VC(PNG); VC(PPM); VC(PBM); VC(PGM); VC(PGMYUV); VC(PAM); VC(FFVHUFF); VC(RV30); VC(RV40); VC(VC1); VC(WMV3); VC(LOCO); VC(WNV1); VC(AASC); VC(INDEO2); VC(FRAPS); VC(TRUEMOTION2); VC(BMP); VC(CSCD); VC(MMVIDEO); VC(ZMBV); VC(AVS); VC(SMACKVIDEO); VC(NUV); VC(KMVC); VC(FLASHSV); VC(CAVS); VC(JPEG2000); VC(VMNC); VC(VP5); VC(VP6); VC(VP6F); VC(TARGA); VC(DSICINVIDEO); VC(TIERTEXSEQVIDEO); VC(TIFF); VC(GIF); VC(FFH264); VC(DXA); VC(DNXHD); VC(THP); VC(SGI); VC(C93); VC(BETHSOFTVID); VC(PTX); VC(TXD); VC(VP6A); VC(AMV); VC(VB); VC(PCX); VC(SUNRAST); VC(INDEO4); VC(INDEO5); VC(MIMIC); VC(RL2); VC(8SVX_EXP); VC(8SVX_FIB); VC(ESCAPE124); VC(DIRAC); VC(BFI); VC(CMV); VC(MOTIONPIXELS); VC(TGV); VC(TGQ); VC(TQI);
+#undef VC
+                }
+                if (vc) {
+                    log_debug("Video codec: %d = %s\n", st->codec->codec_id, vc);
+                    String vcodec = String(vc);
+                    if (string_ok(vcodec))
+                        item->getResource(0)->addOption(_(RESOURCE_OPTION_VCODEC), vcodec);
+                }
+            }
+
 			if ((st->codec->width > 0) && (st->codec->height > 0)) 
             {
                 resolution = String::from(st->codec->width) + "x" + 
@@ -224,6 +242,22 @@
 					audioset = true;
     			}
 			}
+            if (st->codec->codec_id > 0)
+            {
+                const char *ac = NULL;
+                switch(st->codec->codec_id)
+                {
+#define AC(ID) case CODEC_ID_##ID: ac = #ID; break
+                    AC(MP2); AC(MP3); AC(AAC); AC(AC3); AC(DTS); AC(VORBIS); AC(DVAUDIO); AC(WMAV1); AC(WMAV2); AC(MACE3); AC(MACE6); AC(VMDAUDIO); AC(SONIC); AC(SONIC_LS); AC(FLAC); AC(MP3ADU); AC(MP3ON4); AC(SHORTEN); AC(ALAC); AC(WESTWOOD_SND1); AC(GSM); AC(QDM2); AC(COOK); AC(TRUESPEECH); AC(TTA); AC(SMACKAUDIO); AC(QCELP); AC(WAVPACK); AC(DSICINAUDIO); AC(IMC); AC(MUSEPACK7); AC(MLP); AC(GSM_MS); AC(ATRAC3); AC(VOXWARE); AC(APE); AC(NELLYMOSER); AC(MUSEPACK8); AC(SPEEX); AC(WMAVOICE); AC(WMAPRO); AC(WMALOSSLESS); AC(ATRAC3P); AC(EAC3); AC(SIPR); AC(MP1);
+#undef AC
+                }
+                if (ac) {
+                    log_debug("Audio codec: %d = %s\n", st->codec->codec_id, ac);
+                    String acodec = String(ac);
+                    if (string_ok(acodec))
+                        item->getResource(0)->addOption(_(RESOURCE_OPTION_ACODEC), acodec);
+                }
+            }
 		}
 	}
 
--- /src/cds_resource.h	(revision 2102)
+++ /src/cds_resource.h	(working copy)
@@ -45,6 +45,10 @@
 
 #define RESOURCE_OPTION_FOURCC      "4cc"
 
+#define RESOURCE_OPTION_VCODEC      "video_codec"
+
+#define RESOURCE_OPTION_ACODEC      "audio_codec"
+
 class CdsResource : public zmm::Object
 {
 protected:
